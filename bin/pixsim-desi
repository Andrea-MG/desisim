#!/usr/bin/env python

"""
Simulate DESI spectrograph CCD images given input spectra and PSF

First step: organize inputs

pixsim-desi --newexp [--night YEARMMDD --expid EXPID]
pixsim-desi --camera b0 --fibermap FIBERMAP_FILE.fits

pixsim-desi --camera b0 --night 20141114 --expid 2

Stephen Bailey, LBL
January 2014
"""

import sys
import os
import numpy as np
import optparse
import random
import time

import fitsio
import yaml

from astropy.io import fits
from astropy.table import Table

import specter
from specter.psf import load_psf
from specter.throughput import load_throughput
import specter.util

from desisim import pixsim, obs, io

#- Parse options
parser = optparse.OptionParser(
    usage = "%prog [options]",
    epilog = "See $SPECTER_DIR/doc/datamodel.md for input format details"
    )
    
parser.add_option("--newexp", action="store_true", help="Create new exposure")
parser.add_option("--expid", type=int, help="exposure id")
parser.add_option("--night", type=str, help="YEARMMDD")
parser.add_option("--simfile", type=str, help="input sim file")
parser.add_option("--camera", type=str, help="camera (e.g. b0, r5, z9)")
parser.add_option("--verbose", action="store_true", help="print more stuff")
parser.add_option("--randseed", type=int, default=0, help="random number seed")
parser.add_option("--nspec", type=int, help="Number of spectra to simulate", default=5000)

opts, args = parser.parse_args()

#- Check environment
envOK = True
for envvar in ('DESIMODEL', 'PIXPROD', 'DESI_SPECTRO_SIM'):
    if envvar not in os.environ:
        print "ERROR: $%s is required" % envvar
        envOK = False
if not envOK:
    print "Set those environment variable(s) and then try again"
    sys.exit(1)

if opts.camera is None:
    opts.camera = list()
    for arm in ['b', 'r', 'z']:
        for ispec in range(10):
            opts.camera.append(arm+str(ispec))
else:
    opts.camera = opts.camera.split(',')

#- Initialize random seeds
random.seed(opts.randseed)
np.random.seed(opts.randseed)

if opts.newexp:
    tileid = obs.get_next_tile()
    if opts.expid is None:
        opts.expid = obs.get_next_expid()
    dateobs = time.gmtime()
    night = obs.get_night(utc=dateobs)

    #- Get the input spectra
    fibermap, truth, simflux = obs.get_targets(tileid, opts.nspec)    
    
    #- Write the fiber file then append the truth table
    fiberfile = io.write_fibermap(fibermap, opts.expid, night, dateobs, tileid=tileid)
    io.fits.append(fiberfile, truth)
    
    print fiberfile    
    for camera in opts.camera:
        simfile = obs.new_exposure(fibermap, truth, simflux, dateobs=dateobs, camera=camera)
        print simfile
    
    sys.exit(0)

if opts.simfile:
    pixsim.simulate(opts.simfile, verbose=opts.verbose, nspec=opts.nspec)

#-------------------------------------------------------------------------
# if opts.debug:
#     #--- DEBUG ---
#     from pylab import *
#     ion()
#     import IPython
#     IPython.embed()
#     #--- DEBUG ---
    
