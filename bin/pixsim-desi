#!/usr/bin/env python

"""
Simulate DESI spectrograph CCD images given input spectra and PSF

First step: organize inputs

pixsim-desi --newexp [--night YEARMMDD --expid EXPID]
pixsim-desi --camera b0 --fibermap FIBERMAP_FILE.fits

pixsim-desi --camera b0 --night 20141114 --expid 2

Stephen Bailey, LBL
January 2014
"""

import sys
import os
import numpy as np
import optparse
import random
import time
import multiprocessing

from desisim import pixsim, obs, io
from desispec.log import get_logger
log = get_logger()

#- Parse options
parser = optparse.OptionParser(
    usage = "%prog [options]",
    epilog = "See $SPECTER_DIR/doc/datamodel.md for input format details"
    )
        
parser.add_option("--newexp", type=str, dest="flavor", help="create new arc/flat/science")
parser.add_option("--tileid", type=int, help="tile id")
parser.add_option("--expid", type=int, help="exposure id")
parser.add_option("--night", type=str, help="YEARMMDD")
parser.add_option("--airmass",  type=float, help="Airmass [%default]", default=1.0)
### parser.add_option("--simfile", type=str, help="input sim file")
parser.add_option("--camera", type=str, help="camera (e.g. b0, r5, z9)")
parser.add_option("--verbose", action="store_true", help="print more stuff")
parser.add_option("--trimxy", action="store_true", help="Trim image to fit spectra")
parser.add_option("--randseed", type=int, help="random number seed")
parser.add_option("--nspec", type=int, help="Number of spectra to simulate [%default]", default=500)
parser.add_option("--ncpu",  type=int, help="Number of cpu cores to use [%default]", default=multiprocessing.cpu_count() / 2)

opts, args = parser.parse_args()

#- Check environment
envOK = True
for envvar in ('DESIMODEL', 'PIXPROD', 'DESI_SPECTRO_SIM'):
    if envvar not in os.environ:
        log.fatal("${} is required".format(envvar))
        envOK = False
if not envOK:
    print "Set those environment variable(s) and then try again"
    sys.exit(1)

if opts.camera is None:
    opts.camera = ['b0', 'r0', 'z0']
    # opts.camera = list()
    # for arm in ['b', 'r', 'z']:
    #     for ispec in range(10):
    #         opts.camera.append(arm+str(ispec))
else:
    opts.camera = opts.camera.split(',')

#- Initialize tileid
if opts.tileid is None:
    opts.tileid = obs.get_next_tileid()

#- Initialize random seeds
if opts.randseed is None:
    if opts.tileid >= 0:
        opts.randseed = opts.tileid
        
random.seed(opts.randseed)
np.random.seed(opts.randseed)

if opts.flavor is not None:
    obs.new_exposure(opts.flavor, opts.nspec,   \
        night=opts.night, expid=opts.expid,     \
        tileid=opts.tileid, airmass=opts.airmass)
    sys.exit(0)

for camera in opts.camera:
    pixsim.simulate(opts.night, opts.expid, camera,
        verbose=opts.verbose, nspec=opts.nspec, ncpu=opts.ncpu, trimxy=opts.trimxy)

#-------------------------------------------------------------------------
# if opts.debug:
#     #--- DEBUG ---
#     from pylab import *
#     ion()
#     import IPython
#     IPython.embed()
#     #--- DEBUG ---
    
